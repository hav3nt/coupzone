package com.core.dbdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import com.core.beans.Company;
import com.core.dao.CompanyDAO;
import com.core.dblayer.ConnectionPool;

/**
 * A class to handle Java Beans and the DB
 * 
 * @author Baruch
 */
public class CompanyDBDAO implements CompanyDAO {

	private ConnectionPool connectionPool;

	public CompanyDBDAO() throws Exception {
		this.connectionPool = ConnectionPool.getInstance();
	}

	/**
	 * adds a company to the Company table in the DB
	 * 
	 * @param company
	 *            - The company instance to be added to the DB
	 * @throws SQLException
	 * @return the id which was generated by the DB for the added Company, or
	 *         null if failed retrieving the new created ID
	 * */
	@Override
	public Long createCompany(Company company) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Long companyID = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "INSERT INTO Company VALUES (default, ? , ? , ?)";
			preparedStatement = connection.prepareStatement(sql,
					PreparedStatement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, company.getCompanyName());
			preparedStatement.setString(2, company.getPassword());
			preparedStatement.setString(3, company.getEmail());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			resultSet.next();
			companyID = resultSet.getLong(1);
		} finally {
			if (resultSet != null) {
				resultSet.close();
			}
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return companyID;
	}

	/**
	 * returns a company by it's ID from the Company table in the DB
	 * 
	 * @param id
	 *            - the ID of the searched company
	 * @throws SQLException
	 * @return a company instance if a company with the ID provided as parameter
	 *         was found on DB , or null if a company with the ID wasn't found
	 * */
	@Override
	public Company readCompany(long id) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Company> companies = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Company WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);
			companies = (ArrayList<Company>) this
					.getCompaniesByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (companies == null || companies.isEmpty()) {
			return null;
		}
		return companies.get(0);
	}

	/**
	 * updates a company details on the Company table in the DB
	 * 
	 * @param company
	 *            - the company to update
	 * @throws SQLException
	 * @return the number of rows in table Company who were affected from the
	 *         update operation
	 * */
	@Override
	public int updateCompany(Company company) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "UPDATE Company SET Comp_Name = ?, Password = ?, Email = ? WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, company.getCompanyName());
			preparedStatement.setString(2, company.getPassword());
			preparedStatement.setString(3, company.getEmail());
			preparedStatement.setLong(4, company.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * deletes a company from the the Company table in the DB
	 * 
	 * @param company
	 *            - the company to delete from DB
	 * @throws SQLException
	 * @return the number of rows in table Company who were affected from the
	 *         delete operation
	 * */
	@Override
	public int deleteCompany(Company company) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "DELETE FROM Company WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, company.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * returns a company by it's name from the Company table in the DB
	 * 
	 * @param companyName
	 *            - the company's name
	 * @throws SQLException
	 * @return a company instance if a company with the name provided as
	 *         parameter was found on DB , or null if a company with the name
	 *         wasn't found
	 * */
	@Override
	public Company getCompanyByName(String companyName) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Company> companies = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Company WHERE Comp_Name= ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, companyName);
			companies = (ArrayList<Company>) this
					.getCompaniesByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (companies == null || companies.isEmpty()) {
			return null;
		}
		return companies.get(0);
	}

	/**
	 * checks if a company exists by provided id and name in the Company table
	 * in the DB
	 * 
	 * @param id
	 *            - the ID of the company
	 * @param compName
	 *            - the company's name
	 * @throws SQLException
	 * @return true if a company was found on DB with an ID and a name matching
	 *         the parameters or false otherwise
	 * */
	@Override
	public Company getCompanyByNameAndID(long id, String companyName)
			throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Company> companies = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Company WHERE ID = ? AND Comp_Name = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);
			preparedStatement.setString(2, companyName);
			companies = (ArrayList<Company>) this
					.getCompaniesByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (companies == null || companies.isEmpty()) {
			return null;
		}
		return companies.get(0);
	}

	/**
	 * reads all of the companies on the Company table in the DB
	 * 
	 * @throws SQLException
	 * @return a collection of companies of the system
	 * */
	@Override
	public Collection<Company> getAllCompanies() throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Company> companies = new ArrayList<Company>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Company";
			preparedStatement = connection.prepareStatement(sql);
			companies = (ArrayList<Company>) this
					.getCompaniesByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return companies;
	}

	/**
	 * returns ID of a company in the Company table in the DB with same name and
	 * password like the provided parameters
	 * 
	 * @param companyName
	 *            - the name of the company
	 * @param password
	 *            - the password of the company
	 * @throws SQLException
	 *             if the company name and password wasn't found in DB
	 * @return the id of the logged in company, or null if couldn't find match
	 *         in the DB for the provided company name and password
	 * */
	@Override
	public Long login(String companyName, String password) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Company> companies = new ArrayList<Company>();
		Long companyID = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Company WHERE Comp_Name= ? AND Password= ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, companyName);
			preparedStatement.setString(2, password);
			companies = (ArrayList<Company>) this
					.getCompaniesByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (companies.isEmpty()) {
			return null;
		}
		companyID = companies.get(0).getId();
		return companyID;
	}

	/**
	 * reads companies from the DB which answer the query
	 * 
	 * @param preparedStatement
	 *            - the statement to execute
	 * @throws SQLException
	 * @return a collection of all the system companies or, if the string
	 *         parameter isn't empty, a collection of system coupons match the
	 *         added query
	 * */
	private Collection<Company> getCompaniesByStatement(
			PreparedStatement preparedStatement) throws SQLException {
		Collection<Company> companies = new ArrayList<Company>();
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Company c = new Company(resultSet.getString("Comp_Name"),
					resultSet.getString("Password"),
					resultSet.getString("Email"));
			c.setId(resultSet.getLong("ID"));
			companies.add(c);
		}
		resultSet.close();
		preparedStatement.close();
		return companies;
	}

}
