package com.core.dbdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import com.core.beans.Customer;
import com.core.dao.CustomerDAO;
import com.core.dblayer.ConnectionPool;

/**
 * A class to handle Java Beans and the DB
 * 
 * @author Baruch
 */
public class CustomerDBDAO implements CustomerDAO {

	private ConnectionPool connectionPool;

	public CustomerDBDAO() throws Exception {
		this.connectionPool = ConnectionPool.getInstance();
	}

	/**
	 * adds a customer to the Customer table in the DB
	 * 
	 * @param customer
	 *            - The customer instance to be added to the DB
	 * @throws SQLException
	 * @return the id which was generated by the DB for the added customer
	 * */
	@Override
	public Long createCustomer(Customer customer) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Long customerID = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "INSERT INTO Customer VALUES (default, ? , ? )";
			preparedStatement = connection.prepareStatement(sql,
					Statement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, customer.getCustomerName());
			preparedStatement.setString(2, customer.getPassword());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			resultSet.next();
			customerID = resultSet.getLong(1);
		} finally {
			if (resultSet != null) {
				resultSet.close();
			}
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return customerID;
	}

	/**
	 * returns a customer by it's ID from the Customer table in the DB
	 * 
	 * @param id
	 *            - the ID of the searched customer
	 * @throws SQLException
	 * @return a customer instance if a customer with the ID provided as
	 *         parameter was found on DB , or null if a customer with the ID
	 *         wasn't found
	 * */
	@Override
	public Customer readCustomer(long id) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Customer> customers = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Customer WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);
			customers = (ArrayList<Customer>) this
					.getCustomersByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (customers == null || customers.isEmpty()) {
			return null;
		}
		return customers.get(0);
	}

	/**
	 * updates a customer details on the Customer table in the DB
	 * 
	 * @param customer
	 *            - the customer to update
	 * @throws SQLException
	 * @return the number of rows updated by the operation
	 * */
	@Override
	public int updateCustomer(Customer customer) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "UPDATE Customer SET Cust_Name = ? , Password = ? WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, customer.getCustomerName());
			preparedStatement.setString(2, customer.getPassword());
			preparedStatement.setLong(3, customer.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * deletes a customer from the Customer table in the DB
	 * 
	 * @param customer
	 *            - the customer to delete from DB
	 * @throws SQLException
	 * @return the number of rows deleted by the operation
	 * */
	@Override
	public int deleteCustomer(Customer customer) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "DELETE FROM Customer WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customer.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * returns a customer by it's name from the Customer table in the DB
	 * 
	 * @param customerName
	 *            - the customer's name
	 * @throws SQLException
	 * @return a customer instance if a customer with the name provided as
	 *         parameter was found on DB , or null if a customer with the name
	 *         wasn't found
	 * */
	@Override
	public Customer getCustomerByName(String customerName) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Customer> customers = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Customer WHERE Cust_Name = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, customerName);
			customers = (ArrayList<Customer>) this
					.getCustomersByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (customers == null || customers.isEmpty()) {
			return null;
		}
		return customers.get(0);
	}

	/**
	 * checks if a customer exists by provided id and name
	 * 
	 * @param id
	 *            - customer ID
	 * @param customerName
	 *            - customer name
	 * @throws SQLException
	 * @return a Customer with same name and ID like the parameters
	 * */
	@Override
	public Customer getCustomerByNameAndID(long id, String customerName)
			throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Customer> customers = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Customer WHERE ID = ? AND Cust_Name = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);
			preparedStatement.setString(2, customerName);
			customers = (ArrayList<Customer>) this
					.getCustomersByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (customers == null || customers.isEmpty()) {
			return null;
		}
		return customers.get(0);
	}

	/**
	 * reads all companies from the DB
	 * 
	 * @throws SQLException
	 * @return a collection of all the system customers
	 * */
	@Override
	public Collection<Customer> getAllCustomers() throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Collection<Customer> customers = new ArrayList<Customer>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Customer";
			preparedStatement = connection.prepareStatement(sql);
			customers = this.getCustomersByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return customers;
	}

	/**
	 * returns a long ID of a customer with same name and password like the
	 * parameters
	 * 
	 * @param customerName
	 *            - the name of current customer
	 * @param password
	 *            - the password
	 * @throws SQLException
	 * @return an ID of type long of the current customer
	 * */
	@Override
	public Long login(String customerName, String password) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Customer> customers = new ArrayList<Customer>();
		Long customerID = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = " SELECT * FROM Customer WHERE Cust_Name = ? AND Password = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, customerName);
			preparedStatement.setString(2, password);
			customers = (ArrayList<Customer>) this
					.getCustomersByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (customers.isEmpty()) {
			return null;
		}
		customerID = customers.get(0).getId();
		return customerID;
	}

	/**
	 * returns customers by provided sql query
	 * 
	 * @param preparedStatement
	 *            - the statement to execute
	 * @throws SQLException
	 * @return a collection of system customers match the provided statement
	 * */
	private Collection<Customer> getCustomersByStatement(
			PreparedStatement preparedStatement) throws SQLException {
		Collection<Customer> customers = new ArrayList<>();
		try {
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Customer customer = new Customer(
						resultSet.getString("Cust_Name"),
						resultSet.getString("Password"));
				customer.setId(resultSet.getLong("ID"));
				customers.add(customer);
			}
			resultSet.close();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
		}
		return customers;
	}

}
