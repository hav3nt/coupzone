package com.core.dbdao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import com.core.beans.Coupon;
import com.core.beans.CouponType;
import com.core.dao.CouponDAO;
import com.core.dblayer.ConnectionPool;

/**
 * A class to handle Java Beans and the DB
 * 
 * @author Baruch
 */
public class CouponDBDAO implements CouponDAO {

	private ConnectionPool connectionPool;

	public CouponDBDAO() throws Exception {
		this.connectionPool = ConnectionPool.getInstance();
	}

	/**
	 * adds a coupon to the Coupon table in the DB
	 * 
	 * @param coupon
	 *            - The coupon instance to be added to the DB
	 * @throws SQLException
	 * @return the id which was generated by the DB for the added Coupon
	 * */
	@Override
	public Long createCoupon(Coupon coupon) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Long couponID = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "INSERT INTO Coupon VALUES (default, ?,?,?,?,?,?,?,? )";
			preparedStatement = connection.prepareStatement(sql,
					PreparedStatement.RETURN_GENERATED_KEYS);
			preparedStatement.setString(1, coupon.getTitle());
			preparedStatement.setDate(2, Date.valueOf(coupon.getStartDate()));
			preparedStatement.setDate(3, Date.valueOf(coupon.getEndDate()));
			preparedStatement.setInt(4, coupon.getAmount());
			preparedStatement.setString(5, coupon.getType());
			preparedStatement.setString(6, coupon.getMessage());
			preparedStatement.setDouble(7, coupon.getPrice());
			preparedStatement.setString(8, coupon.getImage());
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			resultSet.next();
			couponID = resultSet.getLong(1);
		} finally {
			if (resultSet != null) {
				resultSet.close();
			}
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return couponID;
	}

	/**
	 * returns a coupon by it's ID from the Coupon table in the DB
	 * 
	 * @param id
	 *            - the ID of the searched coupon
	 * @throws SQLException
	 * @return a coupon instance if a coupon with the ID provided as parameter
	 *         was found on DB , or null if a coupon with the ID wasn't found
	 * */
	@Override
	public Coupon readCoupon(long id) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Coupon> coupons = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon WHERE id = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, id);
			coupons = (ArrayList<Coupon>) this
					.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (coupons == null || coupons.isEmpty()) {
			return null;
		}
		return coupons.get(0);
	}

	/**
	 * updates a coupon details on the Coupon table in the DB
	 * 
	 * @param coupon
	 *            - the coupon to update
	 * @throws SQLException
	 * @return the number of rows affected from the update operation in Coupon
	 *         table
	 * */
	@Override
	public int updateCoupon(Coupon coupon) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "UPDATE Coupon SET TITLE = ?, START_DATE = ?, END_DATE = ?, AMOUNT =?, TYPE =?, MESSAGE =?,PRICE =?, IMAGE =? WHERE ID= ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, coupon.getTitle());
			preparedStatement.setDate(2, Date.valueOf(coupon.getStartDate()));
			preparedStatement.setDate(3, Date.valueOf(coupon.getEndDate()));
			preparedStatement.setInt(4, coupon.getAmount());
			preparedStatement.setString(5, coupon.getType().toString());
			preparedStatement.setString(6, coupon.getMessage());
			preparedStatement.setDouble(7, coupon.getPrice());
			preparedStatement.setString(8, coupon.getImage());
			preparedStatement.setLong(9, coupon.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * deletes a coupon from the Coupon table in the DB
	 * 
	 * @param coupon
	 *            - the coupon to delete from DB DB
	 * @throws SQLException
	 * @return the number of rows who were affected from the delete operation
	 * */
	@Override
	public int deleteCoupon(Coupon coupon) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		int rowsAffected = 0;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "DELETE FROM Coupon WHERE ID = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, coupon.getId());
			rowsAffected = preparedStatement.executeUpdate();
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return rowsAffected;
	}

	/**
	 * returns a coupon by it's title name from the Coupon table in the DB
	 * 
	 * @param title
	 *            - the coupon's title
	 * @throws SQLException
	 * @return a coupon instance if a coupon with the name provided as parameter
	 *         was found on DB , or null if a coupon with the name wasn't found
	 * */
	@Override
	public Coupon getCouponByTitle(String title) throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ArrayList<Coupon> coupons = null;
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon WHERE Title = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, title);
			coupons = (ArrayList<Coupon>) this
					.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		if (coupons == null || coupons.isEmpty()) {
			return null;
		}
		return coupons.get(0);
	}

	/**
	 * returns coupons by specific type from the Coupon table in the DB
	 * 
	 * @param couponType
	 *            - the searched coupon's type
	 * @throws SQLException
	 * @return a collection of the coupons of the same type provided as
	 *         parameter
	 * */
	@Override
	public Collection<Coupon> getCouponsByType(CouponType couponType)
			throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Collection<Coupon> coupons = new ArrayList<Coupon>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon WHERE Type = ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, couponType.toString());
			coupons = this.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return coupons;
	}

	/**
	 * returns coupons by top price from the Coupon table in the DB
	 * 
	 * @param price
	 *            - the top price of the searched coupons
	 * @throws SQLException
	 * @return a collection of the coupons with a price lower than the price
	 *         parameter
	 * */
	@Override
	public Collection<Coupon> getCouponsByTopPrice(double price)
			throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Collection<Coupon> coupons = new ArrayList<Coupon>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon WHERE Price < ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setDouble(1, price);
			coupons = this.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return coupons;
	}

	/**
	 * returns coupons by ending date the Coupon table in the DB
	 * 
	 * @param endDate
	 *            - the end date for the search operation
	 * @throws SQLException
	 * @return a collection of the coupons with end date sooner than the end
	 *         date provided as parameter
	 * */
	@Override
	public Collection<Coupon> getCouponsByEndDate(Date endDate)
			throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Collection<Coupon> coupons = new ArrayList<Coupon>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon WHERE End_Date <= ?";
			preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setDate(1, endDate);
			coupons = this.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return coupons;
	}

	/**
	 * returns all the coupons from the Coupon table in the DB
	 * 
	 * @throws SQLException
	 * @return a collection of the coupons in the system's DB
	 * */
	@Override
	public Collection<Coupon> getAllCoupons() throws SQLException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		Collection<Coupon> coupons = new ArrayList<Coupon>();
		try {
			connection = this.connectionPool.getConnection();
			String sql = "SELECT * FROM Coupon";
			preparedStatement = connection.prepareStatement(sql);
			coupons = this.getCouponsByStatement(preparedStatement);
		} finally {
			this.connectionPool.closeStatement(preparedStatement);
			this.connectionPool.returnConnection(connection);
		}
		return coupons;
	}

	/**
	 * returns coupons by prepared statement from the Coupon table in the DB
	 * 
	 * @param preparedStatement
	 *            - the Statement to execute
	 * @throws SQLException
	 * @return a collection of the system coupons which returned from the DB by
	 *         the statement
	 * */
	private Collection<Coupon> getCouponsByStatement(
			PreparedStatement preparedStatement) throws SQLException {
		Collection<Coupon> coupons = new ArrayList<Coupon>();
		ResultSet resultSet = preparedStatement.executeQuery();
		while (resultSet.next()) {
			Coupon coupon = new Coupon(resultSet.getString("Title"),
					resultSet.getDate("Start_Date"),
					resultSet.getDate("End_Date"), resultSet.getInt("Amount"),
					CouponType.valueOf(resultSet.getString("Type")),
					resultSet.getString("Message"),
					resultSet.getDouble("Price"), resultSet.getString("Image"));
			coupon.setId(resultSet.getLong("ID"));
			coupons.add(coupon);
		}
		if (resultSet != null) {
			resultSet.close();
		}
		this.connectionPool.closeStatement(preparedStatement);
		return coupons;
	}

}
